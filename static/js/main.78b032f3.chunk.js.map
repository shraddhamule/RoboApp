{"version":3,"sources":["Component/Card/card.js","Component/Cardlist/cardlist.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","Cardlist","users","map","user","key","App","state","searchField","fetch","then","respose","json","data","setState","console","log","filteredRobot","this","filter","toLowerCase","includes","type","placeholder","onChange","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAiBeA,G,MAbJ,SAACC,GACX,OACC,yBAAKC,UAAU,YACf,yBAAKC,IAAG,2CAAsCF,EAAMG,IAAMC,IAAI,SAE9D,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCNCC,G,MAAS,SAAC,GAAW,IAAVC,EAAS,EAATA,MACvB,OACE,yBAAKP,UAAU,QAEdO,EAAMC,KAAI,SAAAC,GAAI,OAAG,kBAAC,EAAD,CAAML,KAAMK,EAAKL,KAAMC,MAAOI,EAAKJ,MAAOH,GAAIO,EAAKP,GAAIQ,IAAKD,EAAKP,WCmCvES,G,kBAnCb,aAAc,IAAD,8BACX,+CACKC,MAAM,CACHL,MAAM,GACNM,YAAY,IAJT,E,iFAOO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAO,OAAEA,EAAQC,UACpBF,MAAK,SAAAG,GAAI,OAAE,EAAKC,SAAS,CAACZ,MAAMW,GAAME,QAAQC,IAAI,EAAKT,MAAML,a,+BAKjE,IAAD,OAEQe,EAAcC,KAAKX,MAAML,MAAMiB,QAAO,SAAAjB,GAEtC,OAAOA,EAAMH,KAAKqB,cAAcC,SAAS,EAAKd,MAAMC,gBAI3D,OAEM,yBAAKb,UAAU,OACd,wBAAIE,GAAG,SAAP,gBACA,2BAAOyB,KAAK,OAAOC,YAAY,iBAAiBC,SAAU,SAACC,GAAD,OAAK,EAAKX,SAAS,CAACN,YAAYiB,EAAEC,OAAOC,WACjG,kBAAC,EAAD,CAAUzB,MAASe,S,GA7BbW,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.78b032f3.chunk.js","sourcesContent":["\r\n\r\nimport React from 'react';\r\nimport './card.css';\r\nconst Card=(props)=>{\r\n\treturn(\r\n\t\t<div className=\"roboCard\">\r\n\t\t<img src={`https://robohash.org/pragatirutu/${props.id}`} alt=\"robo\"/>\r\n\t\t\r\n\t\t<h2>{props.name}</h2>\r\n\t\t<p>{props.email}</p>\r\n\t\t\r\n\t\t</div>\r\n\t\t\r\n\t\t)\r\n\r\n}\r\nexport default Card;","import React from 'react'\r\nimport './cardlist.css';\r\nimport Card from '../Card/card.js';\r\n\r\nexport const Cardlist=({users})=>{\r\n\treturn(\r\n\t\t\t<div className=\"list\">\r\n\t\t\t{\r\n\t\t\t\tusers.map(user=> <Card name={user.name} email={user.email} id={user.id} key={user.id}/>)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t)\r\n}","import React from 'react';\nimport Card from './Component/Card/card.js';\nimport {Cardlist} from './Component/Cardlist/cardlist.js';\nimport './App.css';\n\n\n  \nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state={\n            users:[],\n            searchField:\"\"\n          }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(respose=>respose.json())\n      .then(data=>this.setState({users:data},console.log(this.state.users)));\n\n\n  }\n  render()\n  {\n      \n    const filteredRobot=this.state.users.filter(users => \n      {\n          return users.name.toLowerCase().includes(this.state.searchField)\n      });\n                // console.log(this.state.users)\n                 //console.log(filteredRobot)\n   return(\n\n         <div className=\"App\">\n          <h1 id=\"title\">ROBO FRIENDS</h1>\n          <input type=\"text\" placeholder=\" Search Robots\" onChange={(e)=>this.setState({searchField:e.target.value})}/>\n            <Cardlist users = {filteredRobot} />\n       </div>\n       )\n  }\n}\n\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}